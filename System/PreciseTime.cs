// <auto-generated />
#region License
// MIT License
// 
// Copyright (c) Daniel Cazzulino
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#endregion

#nullable enable
using System;
using System.Diagnostics;

namespace System
{
    /// <summary>
    /// Provides a high-precision (down to a tenths of microseconds) 
    /// <see cref="DateTimeOffset"/> value for <see cref="UtcNow"/>.
    /// </summary>
    static partial class PreciseTime
    {
        static readonly Stopwatch watch = Stopwatch.StartNew();
        // We just preserve seconds precision from DateTimeOffset.
        static readonly long startTicks = DateTimeOffset.UtcNow.Ticks / TimeSpan.TicksPerSecond * TimeSpan.TicksPerSecond;

        /// <summary>
        /// Gets the elapsed time since the initial usage of <see cref="PreciseTime"/>.
        /// </summary>
        public static TimeSpan Uptime => TimeSpan.FromTicks(GetUtcNowTicks() - startTicks);

        /// <summary>
        /// Gets the high-precision value of the current UTC date time, with 10.000.000ths of a 
        /// second precision (within the current process), if supported by the underlying runtime 
        /// and OS, as indicated by <see cref="Stopwatch.IsHighResolution"/>.
        /// </summary>
        public static DateTimeOffset UtcNow => Stopwatch.IsHighResolution ?
            new DateTimeOffset(GetUtcNowTicks(), TimeSpan.Zero) :
            DateTimeOffset.UtcNow;

        /// <summary>
        /// Gets the high-precision value of the current local date time, with 10.000.000ths of a 
        /// second precision (within the current process), if supported by the underlying runtime 
        /// and OS, as indicated by <see cref="Stopwatch.IsHighResolution"/>.
        /// </summary>
        public static DateTimeOffset Now => Stopwatch.IsHighResolution ? UtcNow.ToLocalTime() : DateTimeOffset.Now;
        
        static long GetUtcNowTicks()
        {
            // Calculate the fractional elapsed seconds since we started
            double elapsedTicks = watch.ElapsedTicks / (double)Stopwatch.Frequency;
            // Add back with same resolution per second we removed from start ticks.
            return startTicks + (long)(elapsedTicks * Stopwatch.Frequency);
        }
    }
}
