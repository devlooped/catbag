// <auto-generated />
#region License
// MIT License
// 
// Copyright (c) Daniel Cazzulino
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#endregion

using System;
using System.Buffers;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using System.Threading;
using SixLabors.ImageSharp.PixelFormats;
using SixLabors.ImageSharp.Processing;
using SixLabors.ImageSharp.Processing.Processors.Quantization;

namespace SixLabors.ImageSharp;

/// <summary>
/// Provides methods for converting images to Sixel format, which is a bitmap graphics format used
/// to render images directly in the terminal.
/// </summary>
public static class Sixel
{
    const byte Cutoff = 127;
    const string Prelude = "\x1BP7;1;q";
    const string Epilogue = "\x1B\\";

    /// <summary>
    /// Detects if the terminal supports sixel graphics.
    /// </summary>
    /// <returns></returns>
    public static bool DetectSupport()
    {
        // Use console capabilities to check for sixel support
        Console.Write("\x1B[c");
        Thread.Sleep(100);

        var capabilities = new StringBuilder();
        while (Console.KeyAvailable)
        {
            var key = Console.ReadKey(true);
            capabilities.Append(key.KeyChar);
        }

        // 4 is the sixel capability
        return capabilities.ToString().Split(';').Contains("4");
    }

    /// <summary>
    /// Helper method that invokes <see cref="ToSixel(Image{Rgba32})"/> extension method 
    /// on the image.
    /// </summary>
    /// <param name="image"></param>
    /// <returns></returns>
    public static string FromImage(Image<Rgba32> image) => image.ToSixel();

    extension(Image<Rgba32> image)
    {
        /// <summary>
        /// Converts an Image{Rgba32} to a 256-colors Sixel string representation.
        /// </summary>
        /// <param name="image">The image to convert.</param>
        /// <returns>A string containing the Sixel representation of the image.</returns>
        public string ToSixel()
        {
            image.Mutate(ctx => ctx.Quantize(new WuQuantizer(new QuantizerOptions
            {
                MaxColors = 256,
                DitherScale = QuantizerConstants.MaxDitherScale
            })));

            var width = image.Width;
            var height = image.Height;

            var frame = image.Frames[0];
            var prelude = Prelude;
            var epilogue = Epilogue;

            var sb = new StringBuilder().Append(prelude);
            var sixelsArr = ArrayPool<int>.Shared.Rent(width);
            try
            {
                frame.ProcessPixelRows(accessor =>
                {
                    var seen = new HashSet<Rgb24>();
                    var paletteList = new List<Rgb24>();
                    for (var y = 0; y < height; y++)
                    {
                        var row = accessor.GetRowSpan(y);
                        for (var x = 0; x < width; x++)
                        {
                            var pix = row[x];
                            if (pix.A > Cutoff)
                            {
                                var rgb = new Rgb24(pix.R, pix.G, pix.B);
                                if (seen.Add(rgb))
                                {
                                    paletteList.Add(rgb);
                                }
                            }
                        }
                    }

                    Debug.Assert(paletteList.Count <= 256, "The palette contains more than the desired max no of colors");

                    for (var i = 0; i < paletteList.Count; i++)
                    {
                        var rgb = paletteList[i];
                        sb.Append($"#{i};2;{rgb.Sixel}");
                    }

                    var sixels = sixelsArr.AsSpan(0, width);

                    var h6 = (height + 5) / 6;
                    for (var y6 = 0; y6 < h6; y6++)
                    {
                        var y = y6 * 6;
                        var rem = Math.Min(height - y - 1, 5);

                        Span<Rgba32> row0 = default, row1 = default, row2 = default, row3 = default, row4 = default, row5 = default;
                        for (var j = 0; j <= rem; j++)
                        {
                            var cy = y + j;
                            if (cy < height)
                            {
                                var rowSpan = accessor.GetRowSpan(cy);
                                switch (j)
                                {
                                    case 0: row0 = rowSpan; break;
                                    case 1: row1 = rowSpan; break;
                                    case 2: row2 = rowSpan; break;
                                    case 3: row3 = rowSpan; break;
                                    case 4: row4 = rowSpan; break;
                                    case 5: row5 = rowSpan; break;
                                }
                            }
                        }

                        for (var colIdx = 0; colIdx < paletteList.Count; colIdx++)
                        {
                            var rgb = paletteList[colIdx];
                            sixels.Clear();
                            var ones = 0;
                            for (var j = 0; j <= rem; j++)
                            {
                                var row = j switch
                                {
                                    0 => row0,
                                    1 => row1,
                                    2 => row2,
                                    3 => row3,
                                    4 => row4,
                                    5 => row5,
                                    _ => default
                                };
                                if (row.IsEmpty) continue;
                                var bit = 1 << j;
                                for (var x = 0; x < width; x++)
                                {
                                    var pix = row[x];
                                    if (pix.A > Cutoff && pix.R == rgb.R && pix.G == rgb.G && pix.B == rgb.B)
                                    {
                                        sixels[x] |= bit;
                                        ones++;
                                    }
                                }
                            }

                            if (ones > 0)
                            {
                                sb.Append('#');
                                sb.Append(colIdx);
                                RunLengthEncoding(sixels, sb);
                                sb.Append('$');
                            }
                        }
                        sb.Append('-');
                    }
                });

                return sb.Append(epilogue).ToString();
            }
            finally
            {
                ArrayPool<int>.Shared.Return(sixelsArr, true);
            }
        }

        /// <summary>
        /// Performs run-length encoding (RLE) on a span of integers representing sixel data during sixel conversion. 
        /// Compresses sequences of identical values into a compact string format appended to a StringBuilder.
        /// </summary>
        static void RunLengthEncoding(Span<int> sixels, StringBuilder sb)
        {
            var i = 0;
            while (i < sixels.Length)
            {
                var current = sixels[i];
                var repetitions = 1;
                i++;
                while (i < sixels.Length && sixels[i] == current)
                {
                    repetitions++;
                    i++;
                }
                RunLengthEncodingToken(sb, repetitions, current);
            }
        }

        /// <summary>
        /// Emits the run-length encoding token for a specific value and its repetitions.
        /// </summary>
        static void RunLengthEncodingToken(StringBuilder sb, int repetitions, int current)
        {
            var tbw = (char)(63 + (current & 0x3F));
            if (repetitions > 3)
            {
                sb.Append('!').Append(repetitions).Append(tbw);
            }
            else
            {
                for (var j = 0; j < repetitions; j++)
                {
                    sb.Append(tbw);
                }
            }
        }
    }

    extension(byte value)
    {
        /// <summary>
        /// Gets the sixel representation of a byte value (0-255) as an integer (0-100).
        /// </summary>
        internal int Sixel => (int)Math.Round(value * 100.0 / 255.0);
    }

    extension(Rgb24 rgb)
    {
        /// <summary>
        /// Gets the sixel representation of an RGB color as a string in the format "R;G;B" (as sixel percentage values).
        /// </summary>
        internal string Sixel => $"{rgb.R.Sixel};{rgb.G.Sixel};{rgb.B.Sixel}";
    }
}
